package org.sourceforge.droidstick;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.widget.EditText;
import android.widget.ImageView;



public class DroidStick extends Activity{ 

	EditText t1;
	EditText t2;
	EditText t3;
	ImageView image1;
	public String URL;
	int oldlat=0,oldlon=0;
	String lat,lon;
	
	LocationListener list=new LocationListener() {
		
		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
			
		}
		
		@Override
		public void onProviderEnabled(String provider) {
			t3.setText(provider+" - Enabled");
		}
		
		@Override
		public void onProviderDisabled(String provider) {
			t3.setText(provider+" - Disabled");
		}
		
		@Override
		public void onLocationChanged(Location location) {
			// TODO Auto-generated method stub
			double dlat,dlon;
			dlat=location.getLatitude();
			dlon=location.getLongitude();
			int newlat,newlon;
			newlat=(int)dlat*10000;
			newlon=(int)dlon*10000;
			t3.setText("GPS loc changed");
			if(oldlat!=newlat || oldlon!=newlon)
			{
				lat = (String)String.valueOf(dlat).subSequence(0, 8);
				lon = (String)String.valueOf(dlon).subSequence(0, 8);
				
				String loc=lat+","+lon;
				URL="http://maps.googleapis.com/maps/api/staticmap?center="+loc+"&zoom=18&maptype=hybrid&size=400x400&sensor=false";
				t3.setText(URL);
				GetXMLTask task = new GetXMLTask();
		        task.execute(new String[] { URL });
		        
		        upload_loc ul=new upload_loc();
		        ul.execute();
		        
				t1.setText(lat);
				t2.setText(lon);
				//t3.setText("Co-ordinates aquired");
				oldlat=newlat;
				oldlon=newlon;
		}
		}
	};
	

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_droid_stick);
		t1=(EditText)findViewById(R.id.editText1);
		t2 = (EditText)findViewById(R.id.editText2);
		t3 = (EditText)findViewById(R.id.editText3);
		image1=(ImageView)findViewById(R.id.imageView1);
		LocationManager lm=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
		t2.setText("Started new");
		
		
        
		lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, list);
	}
	
	
	private class upload_loc extends AsyncTask<Void, Void, Void>
	{

		@Override
		protected Void doInBackground(Void... arg0) {
	        try {
	        	URL url = new URL("server880.comxa.com/friend_finder.php?lat="+lat+"&lon="+lon);
		        URLConnection connection = url.openConnection();
	            HttpURLConnection httpConnection = (HttpURLConnection) connection;
	            httpConnection.setRequestMethod("GET");
	            httpConnection.connect();

	        } catch (Exception ex) {
	        	t3.setText(ex.toString());
	            ex.printStackTrace();
	        }
			
			return null;
		}
	}

	
	private class GetXMLTask extends AsyncTask<String, Void, Bitmap> {
	    @Override
	    protected Bitmap doInBackground(String... urls) {
	        Bitmap map = null;
	        for (String url : urls) {
	            map = downloadImage(url);
	        }
	        return map;
	    }

	    // Sets the Bitmap returned by doInBackground
	    @Override
	    protected void onPostExecute(Bitmap result) {
	        image1.setImageBitmap(result);
	    }

	    // Creates Bitmap from InputStream and returns it
	    private Bitmap downloadImage(String url) {
	        Bitmap bitmap = null;
	        InputStream stream = null;
	        BitmapFactory.Options bmOptions = new BitmapFactory.Options();
	        bmOptions.inSampleSize = 1;

	        try {
	            stream = getHttpConnection(url);
	            bitmap = BitmapFactory.
	                    decodeStream(stream, null, bmOptions);
	            stream.close();
	        } catch (IOException e1) {
	            e1.printStackTrace();
	        }
	        return bitmap;
	    }

	    // Makes HttpURLConnection and returns InputStream
	    private InputStream getHttpConnection(String urlString)
	            throws IOException {
	        InputStream stream = null;
	        URL url = new URL(urlString);
	        URLConnection connection = url.openConnection();

	        try {
	            HttpURLConnection httpConnection = (HttpURLConnection) connection;
	            httpConnection.setRequestMethod("GET");
	            httpConnection.connect();

	            if (httpConnection.getResponseCode() == HttpURLConnection.HTTP_OK) {
	                stream = httpConnection.getInputStream();
	            }
	        } catch (Exception ex) {
	            ex.printStackTrace();
	        }
	        return stream;
	    }
	}

}


