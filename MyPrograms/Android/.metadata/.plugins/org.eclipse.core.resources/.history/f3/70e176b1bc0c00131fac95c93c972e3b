package org.sourceforge.droidstick;

import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.widget.EditText;
import android.widget.ImageView;



public class DroidStick extends Activity{ //SensorEventListener {

	EditText t1;
	EditText t2;
	EditText t3;
	ImageView image1;
	public String URL;
	
	LocationListener list=new LocationListener() {
		
		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
			// TODO Auto-generated method stub
			t3.setText("GPS status changed");
		}
		
		@Override
		public void onProviderEnabled(String provider) {
			// TODO Auto-generated method stub
			t3.setText(provider+" - Enabled");
		}
		
		@Override
		public void onProviderDisabled(String provider) {
			// TODO Auto-generated method stub
			t3.setText(provider+" - Disabled");
		}
		
		@Override
		public void onLocationChanged(Location location) {
			// TODO Auto-generated method stub
			String lat = String.valueOf(location.getLatitude());
			String lon = String.valueOf(location.getLongitude());
			t1.setText(lat);
			t2.setText(lon);
			t3.setText("Co-ordinates aquired");
			
			HttpURLConnection con=null;
			try
			{
				URL url=new URL("http://server880.comxa.com/friend_finder.php?lat=44&lon=56");
				con=(HttpURLConnection)url.openConnection();
				con.connect();
				
			}
			catch(Exception e){t1.setText("error");}
			
		}
	};
	

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_droid_stick);
		t1=(EditText)findViewById(R.id.editText1);
		t2 = (EditText)findViewById(R.id.editText2);
		t3 = (EditText)findViewById(R.id.editText3);
		image1=(ImageView)findViewById(R.id.imageView1);
		LocationManager lm=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
		t2.setText("Started new");
		int width = image1.getWidth();
		int height = image1.getHeight();
		
		String tmp=String.valueOf(width)+"x"+String.valueOf(height);
		URL= 
		        "http://maps.googleapis.com/maps/api/staticmap?center=40.714728,-73.998672&zoom=12&size="+tmp+"&sensor=false";
		GetXMLTask task = new GetXMLTask();
        // Execute the task
        task.execute(new String[] { URL });
		//loadImage("http://csab.in/Images/csab2013.png");
		lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, list);
	}

	public void loadImage(String address)  {
		t1.setText("li");
		try{
			final URL url=new URL(address);
			new Thread(new Runnable(){
				public void run(){
					try
					{
					Bitmap bmp=BitmapFactory.decodeStream(url.openConnection().getInputStream());
					image1.setImageBitmap(bmp);
					t1.setText("ImageLoaded");
					}
					catch(Exception e){t1.setText("error li");t2.setText(e.toString());}
				}	
			}).start();
		}
		catch(Exception e){t1.setText(e.toString());}

	}
	
	private class GetXMLTask extends AsyncTask<String, Void, Bitmap> {
	    @Override
	    protected Bitmap doInBackground(String... urls) {
	        Bitmap map = null;
	        for (String url : urls) {
	            map = downloadImage(url);
	        }
	        return map;
	    }

	    // Sets the Bitmap returned by doInBackground
	    @Override
	    protected void onPostExecute(Bitmap result) {
	        image1.setImageBitmap(result);
	    }

	    // Creates Bitmap from InputStream and returns it
	    private Bitmap downloadImage(String url) {
	        Bitmap bitmap = null;
	        InputStream stream = null;
	        BitmapFactory.Options bmOptions = new BitmapFactory.Options();
	        bmOptions.inSampleSize = 1;

	        try {
	            stream = getHttpConnection(url);
	            bitmap = BitmapFactory.
	                    decodeStream(stream, null, bmOptions);
	            stream.close();
	        } catch (IOException e1) {
	            e1.printStackTrace();
	        }
	        return bitmap;
	    }

	    // Makes HttpURLConnection and returns InputStream
	    private InputStream getHttpConnection(String urlString)
	            throws IOException {
	        InputStream stream = null;
	        URL url = new URL(urlString);
	        URLConnection connection = url.openConnection();

	        try {
	            HttpURLConnection httpConnection = (HttpURLConnection) connection;
	            httpConnection.setRequestMethod("GET");
	            httpConnection.connect();

	            if (httpConnection.getResponseCode() == HttpURLConnection.HTTP_OK) {
	                stream = httpConnection.getInputStream();
	            }
	        } catch (Exception ex) {
	            ex.printStackTrace();
	        }
	        return stream;
	    }
	}

}

